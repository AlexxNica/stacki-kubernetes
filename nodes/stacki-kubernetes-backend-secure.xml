<?xml version="1.0" standalone="no"?>
<kickstart>

<description>
Kubernetes client 
</description>

<!-- shell code for post RPM installation -->
<package>kubernetes-server</package>
<package>kubernetes-extras</package>
<package>kubernetes-client</package>
<package>socat</package>
<package cond="&kube.master;">kubernetes-images</package>
<package cond="&kube.master;">firefox</package>

<post>
useradd kubeadmin
echo "kubeadmin" | passwd --stdin kubeadmin

<file name="/opt/kubernetes/etc/passwords">
kubeadmin,kubeadmin,1000
</file>

mkdir -p /var/log/kubernetes
<!-- common kubernetes config -->
<file name="/opt/kubernetes/etc/config">
KUBE_ALSOLOGTOSTDERR="--alsologtostderr=true"
KUBE_LOG_LEVEL="--v=1"
KUBE_MASTER="--master=https://&kube.master_ip;:6443"
KUBE_LOG_DIR="--log-dir=/var/log/kubernetes"
KUBE_HEALTHZ_ADDRESS="--healthz-bind-address=&hostaddr;"
KUBE_ADDRESS="--address=&hostaddr;"
KUBE_CONFIG="--kubeconfig=/opt/kubernetes/etc/kubeconfig"
KUBE_API_SERVER="--api-servers=https://&kube.master_ip;:6443"
</file>

<!-- kube-proxy -->
<file name="/etc/systemd/system/kube-proxy.service.d/kube-proxy.conf">
[Service]
Environment=KUBE_HOSTNAME_OVERRIDE=--hostname-override=&hostaddr;
#Environment=KUBE_HOSTNAME_OVERRIDE=--hostname-override=&hostname;.&kube.domain;
Environment=KUBE_MASQUERADE_ALL=--masquerade-all
Environment=KUBE_BIND_ADDRESS=--bind-address=&hostaddr;
Environment=KUBE_PROXY_MODE=--proxy-mode=iptables
Environment=KUBE_CLUSTER_CIDR=--cluster-cidr=24
</file>


<file name="/usr/lib/systemd/system/kube-proxy.service">
[Unit]
Description=Kubernetes Kube-Proxy Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=network.target

[Service]
EnvironmentFile=-/opt/kubernetes/etc/config
ExecStart=/opt/kubernetes/bin/kube-proxy \
	    ${KUBE_ALSLOGTOSTDERR} \
	    ${KUBE_LOG_LEVEL} \
            ${KUBE_CONFIG} \
            ${KUBE_CLUSTER_CIDR} \
	    ${KUBE_MASTER} \
	    ${KUBE_HOSTNAME_OVERRIDE} \
            ${KUBE_MASQUERADE_ALL}
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
</file>

<file name="/opt/kubernetes/etc/kubeconfig">
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /opt/kubernetes/etc/certs.d/ca.pem
    server: https://&kube.master_ip;:6443
  name: kubernetes
- cluster:
    certificate-authority: /opt/kubernetes/etc/certs.d/ca.pem
    server: https://&kube.master_ip;:6443
  name: local
contexts:
- context:
    cluster: local
    user: kubelet
  name: kubelet-context
- context:
    cluster: local
    user: kube-proxy
  name: kubeproxy-context
current-context: kubelet-context
kind: Config
preferences: {}
users:
- name: kube-proxy
  user:
    client-certificate: /opt/kubernetes/etc/certs.d/kube-proxy-client.pem
    client-key: /opt/kubernetes/etc/certs.d/kube-proxy-client-key.pem
- name: kubelet
  user:
    client-certificate: /opt/kubernetes/etc/certs.d/kubelet-client.pem
    client-key: /opt/kubernetes/etc/certs.d/kubelet-client-key.pem
</file>

mkdir -p /var/lib/kubelet

<file name="/opt/kubernetes/etc/resolv.conf">
search &kube.domain;
nameserver &kube.master_ip;
</file>

<file name="/etc/systemd/system/kubelet.service.d/kubelet.conf">
[Service]
Environment=KUBE_HOSTNAME_OVERRIDE=--hostname-override=&hostaddr;
#Environment=KUBE_HOSTNAME_OVERRIDE=--hostname-override=&hostname;.&kube.domain;
Environment=KUBE_CLUSTER_DNS=--cluster-dns=&kube.master_ip;
Environment=KUBE_CLUSTER_DOMAIN=--cluster-domain=&kube.domain;
Environment=KUBE_CA_CERT=--client-ca-file=/opt/kubernetes/etc/certs.d/ca.pem
Environment=KUBE_TLS_CERT_FILE=--tls-cert-file=/opt/kubernetes/etc/certs.d/kubelet-client.pem
Environment=KUBE_TLS_KEY_FILE=--tls-private-key-file=/opt/kubernetes/etc/certs.d/kubelet-client-key.pem
Environment=KUBE_RESOLV=--resolv-conf=/opt/kubernetes/etc/resolv.conf
Environment=KUBE_REQUIRE_KUBECONFIG=--require-kubeconfig=true
</file>

<file name="/usr/lib/systemd/system/kubelet.service">
[Unit]
Description=Kubernetes Kubelet Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=docker.service
Requires=docker.service

[Service]
WorkingDirectory=/var/lib/kubelet
EnvironmentFile=-/opt/kubernetes/etc/config
ExecStart=/opt/kubernetes/bin/kubelet \
	    ${KUBE_ALSOLOGTOSTDERR} \
	    ${KUBE_LOG_LEVEL} \
	    ${KUBE_API_SERVER} \
	    ${KUBE_CLUSTER_DNS} \
	    ${KUBE_CLUSTER_DOMAIN} \
	    ${KUBE_HOSTNAME_OVERRIDE} \
            ${KUBE_RESOLV} \
            ${KUBE_REQUIRE_KUBECONFIG} \
            ${KUBE_CONFIG} \
            ${KUBE_EXTRA_OPTS}
Restart=on-failure

[Install]
WantedBy=multi-user.target
</file>

systemctl disable iptables firewalld
systemctl enable kubelet kube-proxy
</post>

<post cond="&kube.master;">

<file name="/etc/systemd/system/kubelet.service.d/kubelet.conf" mode="append">
Environment=KUBE_EXTRA_OPTS=--register-schedulable=False
</file>

<file name="/etc/systemd/system/kube-apiserver.service.d/kube-apiserver.conf">
[Service]
# Client Env Vars
Environment=KUBE_BIND_ADDRESS=--address=10.1.255.254
Environment=KUBE_SERVICE_CLUSTER_IP_RANGE=--service-cluster-ip-range=10.254.0.0/16
Environment=KUBE_ADMISSION_CONTROL=--admission_control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ResourceQuota
Environment=KUBE_CLIENT_CAFILE=--client-ca-file=/opt/kubernetes/etc/certs.d/ca.pem
Environment=KUBE_TLS_CERT_FILE=--tls-cert-file=/opt/kubernetes/etc/certs.d/kube-apiserver-server.pem
Environment=KUBE_TLS_PRIVATE_KEY=--tls-private-key-file=/opt/kubernetes/etc/certs.d/kube-apiserver-server-key.pem
Environment=KUBE_PASS_AUTH=--basic-auth-file=/opt/kubernetes/etc/passwords
Environment=KUBE_ETCD_CAFILE=--etcd-cafile=/opt/kubernetes/etc/certs.d/ca.pem
Environment=KUBE_ETCD_CERTFILE=--etcd-certfile=/opt/kubernetes/etc/certs.d/etcd-member.pem
Environment=KUBE_ETCD_KEYFILE=--etcd-keyfile=/opt/kubernetes/etc/certs.d/etcd-member-key.pem
<eval shell="/opt/stack/bin/python" mode="xml">
import stack.api as api
import stack.commands as cmd

actions = api.Call('report.host.attr',
		['attr=etcd.cluster_member', 'pydict=True'])

urls = []
for a in actions:
	node = a.split(':')[-0].strip()
	val = a.split(':')[-1].strip()
	if cmd.str2bool(val) == True:
		ip = api.Call('report.host.attr',[node,'attr=hostaddr'])
		url = 'https://%s:2379' % (ip[0])
		urls.append(url)

print 'Environment=KUBE_ETCD_SERVERS=--etcd_servers=%s' % ','.join(urls[:])
</eval></file>

<file name="/usr/lib/systemd/system/kube-apiserver.service">
[Unit]
Description=Kubernetes API Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=network.target
After=etcd.service

[Service]
EnvironmentFile=-/opt/kubernetes/etc/config
ExecStart=/opt/kubernetes/bin/kube-apiserver \
    ${KUBE_BIND_ADDRESS} \
    ${KUBE_ETCD_SERVERS} \
    ${KUBE_SERVICE_CLUSTER_IP_RANGE} \
    ${KUBE_ADMISSION_CONTROL} \
    ${KUBE_ALSOLOGTOSTDERR} \
    ${KUBE_LOG_LEVEL} \
    ${KUBE_CLIENT_CAFILE} \
    ${KUBE_TLS_CERT_FILE} \
    ${KUBE_TLS_PRIVATE_KEY} \
    ${KUBE_LOG_DIR} \
    ${KUBE_PASS_AUTH} \
    ${KUBE_ALSOLOGTOSTDERR} \
    ${KUBE_ETCD_CAFILE} \
    ${KUBE_ETCD_CERTFILE} \
    ${KUBE_ETCD_KEYFILE}
Restart=on-failure
Type=notify
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
</file>

<file name="/etc/systemd/system/kube-controller-manager.service.d/kube-controller-manager.conf">
</file>

<file name="/usr/lib/systemd/system/kube-controller-manager.service">
[Unit]
Description=Kubernetes Controller Manager
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
EnvironmentFile=-/opt/kubernetes/etc/config
ExecStart=/opt/kubernetes/bin/kube-controller-manager \
	    ${KUBE_ALSOLOGTOSTDERR} \
	    ${KUBE_LOG_LEVEL} \
	    ${KUBE_LOG_DIR} \
            ${KUBE_CONFIG}
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
</file>

<file name="/etc/systemd/system/kube-scheduler.service.d/kube-scheduler.conf">
</file>

<file name="/usr/lib/systemd/system/kube-scheduler.service">
[Unit]
Description=Kubernetes Scheduler Plugin
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
EnvironmentFile=-/opt/kubernetes/etc/config
ExecStart=/opt/kubernetes/bin/kube-scheduler \
	    ${KUBE_ALSOLOGTOSTDERR} \
	    ${KUBE_LOG_LEVEL} \
	    ${KUBE_LOG_DIR} \
            ${KUBE_CONFIG}
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
</file>

<file name="/etc/systemd/system/kube-dns.service.d/kube-dns.conf">
[Service]
Environment=KUBE_DNS_BIND_ADDRESS=--dns-bind-address=&kube.master_ip;
Environment=KUBE_MASTER_URL=--kube-master-url=https://&kube.master_ip;:6443
Environment=KUBE_DOMAIN=--domain=&kube.domain;
Environment=KUBE_CFG=--kubecfg-file=/opt/kubernetes/etc/kubeconfig
</file>

<file name="/usr/lib/systemd/system/kube-dns.service">
[Unit]
Description=Kubernetes DNS
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=network.target
After=etcd.service

[Service]
EnvironmentFile=-/opt/kubernetes/etc/config
ExecStart=/opt/kubernetes/bin/kube-dns \
        ${KUBE_LOG_LEVEL} \
        ${KUBE_ALSOLOGTOSTDERR} \
        ${KUBE_DNS_BIND_ADDRESS} \
        ${KUBE_DOMAIN} \
        ${KUBE_MASTER_URL} \
        ${KUBE_CFG} \
        ${KUBE_LOG_DIR}
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
</file>

systemctl enable kube-apiserver kube-controller-manager kube-scheduler kube-dns

mkdir /root/.kube
mkdir /home/kubeadmin/.kube
cp /opt/kubernetes/etc/kubeconfig /root/.kube/config
cp /opt/kubernetes/etc/kubeconfig /home/kubeadmin/.kube/config
</post>

<post cond="&kube.pull_pods;">
wget -q -nd -nc -r --no-parent -nd -P /opt/kubernetes/pods --reject='index.html*' http://&Kickstart_PrivateAddress;/&kube.pod_dir;
</post>

<boot order="post" cond="kube.enable_dashboard">
export KUBECONFIG=$KUBECONFIG:/root/.kube/config:/opt/kubernetes/etc/kubeconfig
/opt/kubernetes/bin/kubectl create -f /opt/kubernetes/pods/kubernetes-dashboard-secure.yaml &gt; /root/dash.log 2&gt;&amp;1
</boot>

<boot order="post" cond="kube.spark_demo">
export KUBECONFIG=$KUBECONFIG:/root/.kube/config:/opt/kubernetes/etc/kubeconfig
echo "creating spark?"
sed -i "s/replicas: 2/replicas: 3/g" /opt/kubernetes/share/examples/spark/spark-worker-controller.yaml
/opt/kubernetes/bin/kubectl create -f /opt/kubernetes/share/examples/spark &gt; /root/spark.log 2&gt;&amp;1
</boot>

</kickstart>
