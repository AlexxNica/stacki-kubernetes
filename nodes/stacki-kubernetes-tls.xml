<?xml version="1.0" standalone="no"?>
<kickstart>

<description>
Kubernetes pallet backend base
</description>

<package>cfssl</package>

<post>
<file name="/opt/kubernetes/pki/ca-config.json">
<eval>
cat /opt/kubernetes/pki/ca-config.json
</eval>
</file>

<file name="/opt/kubernetes/pki/ca.pem">
<eval>
cat /opt/kubernetes/pki/ca.pem
</eval>
</file>

<file name="/opt/kubernetes/pki/ca-key.pem">
<eval>
cat /opt/kubernetes/pki/ca-key.pem
</eval>
</file>
<file name="/opt/kubernetes/pki/etcd-server.json">
{
  "CN": "etcd server",
  "hosts": [
	"127.0.0.1",
	"&hostaddr;",
	"&hostname;",
	"*.&Kickstart_PrivateDNSDomain;",
	"*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "&Info_Certificate_Organization;",
      "OU": "&Kickstart_PrivateHostname;",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>

<file name="/opt/kubernetes/pki/etcd-member.json">
{
  "CN": "etcd member",
  "hosts": [
	"127.0.0.1",
	"&hostaddr;",
	"&hostname;",
	"*.&Kickstart_PrivateDNSDomain;",
	"*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "&Info_Certificate_Organization;",
      "OU": "&Kickstart_PrivateHostname;",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
<file name="/opt/kubernetes/pki/docker-client-csr.json">
{
  "CN": "docker-client",
  "hosts": [
	"127.0.0.1",
	"&hostaddr;",
	"&hostname;",
	"*.&Kickstart_PrivateDNSDomain;",
	"*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "&Info_Certificate_Organization;",
      "OU": "&Kickstart_PrivateHostname;",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
<file name="/opt/kubernetes/pki/docker-server-csr.json">
{
  "CN": "docker-server",
  "hosts": [
    "127.0.0.1",
    "&hostaddr;",
    "&hostname;",
    "*.&Kickstart_PrivateDNSDomain;",
    "*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "Docker",
      "OU": "Docker Engine",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
<file name="/opt/kubernetes/pki/kube-apiserver-server-csr.json">
{
  "CN": "kube-apiserver",
  "hosts": [
    "127.0.0.1",
    "&hostaddr;",
    "&hostname;",
    "*.&Kickstart_PrivateDNSDomain;",
    "*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "Kubernetes",
      "OU": "API Server",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
<file name="/opt/kubernetes/pki/kube-controller-manager-client-csr.json">
{
  "CN": "kube-controller-manager",
  "hosts": [
    "127.0.0.1",
    "&hostaddr;",
    "&hostname;",
    "*.&Kickstart_PrivateDNSDomain;",
    "*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "Kubernetes",
      "OU": "Controller Manager",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
<file name="/opt/kubernetes/pki/kubelet-client-csr.json">
{
  "CN": "kubelet",
  "hosts": [
    "127.0.0.1",
    "&hostaddr;",
    "&hostname;",
    "*.&Kickstart_PrivateDNSDomain;",
    "*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "Kubernetes",
      "OU": "Kubelet",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
<file name="/opt/kubernetes/pki/kube-proxy-client-csr.json">
{
  "CN": "kube-proxy",
  "hosts": [
    "127.0.0.1",
    "&hostaddr;",
    "&hostname;",
    "*.&Kickstart_PrivateDNSDomain;",
    "*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "Kubernetes",
      "OU": "Kubernetes Proxy",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
<file name="/opt/kubernetes/pki/kubernetes-admin-user.csr.json">
{
  "CN": "kubeadmin",
  "hosts": [
    "127.0.0.1",
    "&hostaddr;",
    "&hostname;",
    "*.&Kickstart_PrivateDNSDomain;",
    "*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "Kubernetes",
      "OU": "Cluster Admins",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
<file name="/opt/kubernetes/pki/kube-scheduler-client-csr.json">
{
  "CN": "kube-scheduler",
  "hosts": [
    "127.0.0.1",
    "&hostaddr;",
    "&hostname;",
    "*.&Kickstart_PrivateDNSDomain;",
    "*.&Kickstart_PublicDNSDomain;"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "&Info_CertificateCountry;",
      "L": "&Info_CertificateLocality;",
      "O": "Kubernetes",
      "OU": "Scheduler",
      "ST": "&Info_CertificateState;"
    }
  ]
}
</file>
</post>
<!-- gen certs -->
<!-- docker -->
<post>
export PATH=$PATH:/opt/kubernetes/bin
cd /opt/kubernetes/pki

cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-profile=server \
docker-server-csr.json | cfssljson -bare docker-server &gt;&gt; /root/cert.log 2&gt;&amp;1

cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-profile=client \
docker-client-csr.json | cfssljson -bare docker-client &gt;&gt; /root/cert.log 2&gt;&amp;1

<!-- kubernetes -->

cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-profile=server \
kube-apiserver-server-csr.json | cfssljson -bare kube-apiserver-server &gt;&gt; /root/cert.log 2&gt;&amp;1

cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-profile=client \
kubelet-client-csr.json | cfssljson -bare kubelet-client &gt;&gt; /root/cert.log 2&gt;&amp;1

cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-profile=client \
kube-proxy-client-csr.json | cfssljson -bare kube-proxy-client &gt;&gt; /root/cert.log 2&gt;&amp;1

cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-profile=client \
kubernetes-admin-user.csr.json | cfssljson -bare kubernetes-admin-user &gt;&gt; /root/cert.log 2&gt;&amp;1

<!-- peers -->
cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-profile=peer etcd-member.json | cfssljson -bare etcd-member &gt;&gt; /root/cert.log 2&gt;&amp;1

cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-profile=server etcd-server.json | cfssljson -bare etcd-server &gt;&gt; /root/cert.log 2&gt;&amp;1

chmod 0444 *.pem
chmod 0400 *key.pem
chmod 0444 etcd-member-key.pem
chown etcd:etcd etcd-*.pem
</post>
<post>
mkdir /root/.docker
mv -f /opt/kubernetes/pki/docker-client-key.pem /root/.docker/key.pem &gt;&gt; /root/cert.log 2&gt;&amp;1
mv -f /opt/kubernetes/pki/docker-client.pem /root/.docker/cert.pem &gt;&gt; /root/cert.log 2&gt;&amp;1
mv -f /opt/kubernetes/pki/docker-server-key.pem /etc/docker/certs.d/server-key.pem &gt;&gt; /root/cert.log 2&gt;&amp;1
mv -f /opt/kubernetes/pki/docker-server.pem /etc/docker/certs.d/server-cert.pem &gt;&gt; /root/cert.log 2&gt;&amp;1
rm -f /etc/docker/certs.d/ca.pem &gt;&gt; /root/cert.log 2&gt;&amp;1
cp /opt/kubernetes/pki/ca.pem /etc/docker/certs.d/ &gt;&gt; /root/cert.log 2&gt;&amp;1
cp /opt/kubernetes/pki/ca.pem /root/.docker &gt;&gt; /root/cert.log 2&gt;&amp;1
mkdir /opt/kubernetes/etc/certs.d &gt;&gt; /root/cert.log 2&gt;&amp;1
mv /opt/kubernetes/pki/*.pem /opt/kubernetes/etc/certs.d/ &gt;&gt; /root/cert.log 2&gt;&amp;1
cd /opt/kubernetes/pki &gt;&gt; /root/cert.log 2&gt;&amp;1
# rm -f docker-* kube* ca* &gt;&gt; /root/cert.log 2&gt;&amp;1
</post>
</kickstart>
