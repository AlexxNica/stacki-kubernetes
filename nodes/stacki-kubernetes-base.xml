<?xml version="1.0" standalone="no"?>
<kickstart>

<description>
Kubernetes pallet backend base
</description>

<package>lsof</package>
<package>wget</package>
<package>bind-utils</package>
<package>chrony</package>
<package>etcd</package>
<package>flannel</package>
<package>easyrsa</package>

<!-- general -->
<post>
systemctl enable chronyd

<file name="/etc/sysctl.conf" mode="append">
net.ipv4.ip_forward = 1
</file>

mkdir -p /var/lib/docker

</post>

<post cond="sync.hosts">
<file name="/tmp/hosts">
<eval>
cat /etc/hosts
</eval>
</file>

cp /tmp/hosts /etc/hosts
</post>

<!-- etcd -->

<post cond="&etcd.cluster_member;">
getent group etcd &gt; /dev/null || groupadd -r etcd
getent passwd etcd &gt; /dev/null || useradd -r -g etcd -d /var/lib/etcd \
    -s /sbin/nologin -c "etcd user" etcd

mkdir -p /var/lib/etcd
chown -R etcd:etcd /var/lib/etcd

<file name="/usr/lib/systemd/system/etcd.service">
[Unit]
Description=etcd
After=network.target
After=network-online.target
Wants=network-online.target

[Service]
Type=notify
WorkingDirectory=/var/lib/etcd/
EnvironmentFile=-/opt/kubernetes/etc/etcd.conf
ExecStart=/opt/kubernetes/bin/etcd --config-file /opt/kubernetes/etc/etcd.conf
User=etcd
Restart=always
RestartSec=10
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
</file>

mkdir -p /opt/kubernetes/etc/etcd


<file name="/opt/kubernetes/etc/etcd.conf">
# This is the configuration file for the etcd server.

# Human-readable name for this member.
name: '&hostname;.&domainname;'

# Path to the data directory.
data-dir: /var/lib/etcd/default.etcd

# Path to the dedicated wal directory.
wal-dir:

# Number of committed transactions to trigger a snapshot to disk.
snapshot-count: 10000

# Time (in milliseconds) of a heartbeat interval.
heartbeat-interval: 100

# Time (in milliseconds) for an election to timeout.
election-timeout: 1000

# Raise alarms when backend size exceeds the given quota. 0 means use the
# default quota.
quota-backend-bytes: 0

# List of comma separated URLs to listen on for peer traffic.
listen-peer-urls: http://&hostaddr;:2380

# List of comma separated URLs to listen on for client traffic.
listen-client-urls: http://&hostaddr;:2379,http://127.0.0.1:2379

# Maximum number of snapshot files to retain (0 is unlimited).
max-snapshots: 5

# Maximum number of wal files to retain (0 is unlimited).
max-wals: 5

# Comma-separated white list of origins for CORS (cross-origin resource sharing).
cors: 

# List of this member's peer URLs to advertise to the rest of the cluster.
# The URLs needed to be a comma-separated list.
initial-advertise-peer-urls: http://&hostaddr;:2380

# List of this member's client URLs to advertise to the public.
# The URLs needed to be a comma-separated list.
advertise-client-urls: http://&hostaddr;:2379

# Discovery URL used to bootstrap the cluster.
discovery: 

# Valid values include 'exit', 'proxy'
discovery-fallback: 'proxy'

# HTTP proxy to use for traffic to discovery service.
discovery-proxy: 

# DNS domain used to bootstrap initial cluster.
discovery-srv:

# Initial cluster configuration for bootstrapping.
<eval shell="/opt/stack/bin/python" mode="xml">
import stack.api as api
import stack.commands as cmd

actions = api.Call('report.host.attr',
		['attr=etcd.cluster_member', 'pydict=True'])

nodes = []
for a in actions:
	node = a.split(':')[-0].strip()
	val = a.split(':')[-1].strip()
	if cmd.str2bool(val) == True:
		ip = api.Call('report.host.attr',[node,'attr=hostaddr'])
		url = '%s.&domainname;=http://%s:2380' % (node,ip[0])
		nodes.append(url)
print 'initial-cluster:', ','.join(nodes[:])
</eval>

# Initial cluster token for the etcd cluster during bootstrap.
initial-cluster-token: 'etcd-cluster'

# Initial cluster state ('new' or 'existing').
initial-cluster-state: 'new'

# Reject reconfiguration requests that would cause quorum loss.
strict-reconfig-check: false

# Valid values include 'on', 'readonly', 'off'
proxy: 'off'

# Time (in milliseconds) an endpoint will be held in a failed state.
proxy-failure-wait: 5000

# Time (in milliseconds) of the endpoints refresh interval.
proxy-refresh-interval: 30000

# Time (in milliseconds) for a dial to timeout.
proxy-dial-timeout: 1000

# Time (in milliseconds) for a write to timeout.
proxy-write-timeout: 5000

# Time (in milliseconds) for a read to timeout.
proxy-read-timeout: 0

client-transport-security: 
  # DEPRECATED: Path to the client server TLS CA file.
  ca-file: 

  # Path to the client server TLS cert file.
  cert-file:

  # Path to the client server TLS key file.
  key-file:

  # Enable client cert authentication.
  client-cert-auth:

  # Path to the client server TLS trusted CA key file.
  trusted-ca-file:

  # Client TLS using generated certificates
  auto-tls: false

peer-transport-security: 
  # DEPRECATED: Path to the peer server TLS CA file.
  ca-file:

  # Path to the peer server TLS cert file.
  cert-file:

  # Path to the peer server TLS key file.
  key-file:

  # Enable peer client cert authentication.
  client-cert-auth: false

  # Path to the peer server TLS trusted CA key file.
  trusted-ca-file: /etc/pki/tls/certs/ca-bundle.crt

  # Peer TLS using generated certificates.
  auto-tls: false

# Enable debug-level logging for etcd.
debug: true

# Specify a particular log level for each etcd package (eg: 'etcdmain=CRITICAL,etcdserver=DEBUG'.
log-package-levels: 

# Force to create a new one member cluster.
force-new-cluster: false
</file>
systemctl enable etcd
</post>

<post>
<!-- flannel -->
chmod 755 /usr/share/flannel/mk-docker-opts.sh

<file name="/opt/kubernetes/etc/flannel">
FLANNEL_ETCD_PREFIX="--etcd-prefix=&etcd.prefix;"
<eval shell="/opt/stack/bin/python" mode="xml">
import stack.api as api
import stack.commands as cmd

actions = api.Call('report.host.attr',
		['attr=etcd.cluster_member', 'pydict=True'])

urls = []
for a in actions:
	node = a.split(':')[-0].strip()
	val = a.split(':')[-1].strip()
	if cmd.str2bool(val) == True:
		ip = api.Call('report.host.attr',[node,'attr=hostaddr'])
		url = 'http://%s:2379' % (ip[0])
		urls.append(url)

print 'FLANNEL_ETCD_ENDPOINTS="--etcd-endpoints=%s"' % ','.join(urls[:])
</eval></file>

<file name="/usr/lib/systemd/system/flanneld.service">
[Unit]
Description=Flanneld overlay address etcd agent
After=etcd.service
Before=docker.service

[Service]
EnvironmentFile=-/opt/kubernetes/etc/flannel
ExecStart=/opt/kubernetes/bin/flanneld --ip-masq=true ${FLANNEL_ETCD_PREFIX} ${FLANNEL_ETCD_ENDPOINTS}
Restart=always
RestartSec=10
Type=notify

[Install]
WantedBy=multi-user.target
RequiredBy=docker.service
</file>
systemctl enable flanneld
</post>

<post>
<!-- docker with flannel -->

mkdir -p /etc/systemd/system/docker.service.d
systemctl enable docker
</post>

<post cond="&docker.registry.local;"> 
<file name="/etc/systemd/system/docker.service.d/override.conf">
[Service]
EnvironmentFile=-/etc/sysconfig/docker-network
ExecStart=
ExecStart=/usr/bin/dockerd --storage-driver=overlay $DOCKER_OPTS --insecure-registry &kube.master_ip;:5000
Restart=always
RestartSec=10
</file>
</post>

<post cond="&docker.registry.external;"> 
<file name="/etc/systemd/system/docker.service.d/override.conf">
[Service]
EnvironmentFile=-/etc/sysconfig/docker
EnvironmentFile=-/etc/sysconfig/docker-network
ExecStart=
ExecStart=/usr/bin/dockerd --storage-driver=overlay $DOCKER_NETWORK_OPTS $DOCKER_OPTS
Restart=always
RestartSec=10
</file>
</post>

<!-- tls -->
<post>
mkdir -p /srv/kubernetes
cd /opt/kubernetes/easyrsa3
./easyrsa init-pki &gt; /root/keys.log 2&gt;&amp;1
./easyrsa --batch "--req-cn=&kube.master_ip;@`date +%s`" build-ca nopass &gt;&gt; /root/keys.log 2&gt;&amp;1
./easyrsa --subject-alt-name="IP:&kube.master_ip;" build-server-full kubernetes-master nopass &gt;&gt; /root/keys.log 2&gt;&amp;1
cp ./pki/ca.crt /srv/kubernetes/ca.crt &gt;&gt; /root/keys.log 2&gt;&amp;1
cp ./pki/issued/kubernetes-master.crt /srv/kubernetes/server.crt &gt;&gt; /root/keys.log 2&gt;&amp;1
cp ./pki/private/kubernetes-master.key /srv/kubernetes/server.key &gt;&gt; /root/keys.log 2&gt;&amp;1
</post>

<boot order="post" cond="&kube.master;">
/opt/kubernetes/bin/etcdctl mkdir &etcd.prefix;

NETWORK='{ "Network": "10.1.0.0/16", "SubnetLen": 24, "SubnetMin": "10.1.10.0", "SubnetMax": "10.1.30.0", "Backend": { "Type": "udp", "Port": 7890 } }'

echo ${NETWORK} | /opt/kubernetes/bin/etcdctl set &etcd.prefix;/config

systemctl daemon-reload
systemctl restart etcd flanneld

/usr/share/flannel/mk-docker-opts.sh -d /etc/sysconfig/docker-network
systemctl daemon-reload
systemctl restart docker
</boot>

</kickstart>
